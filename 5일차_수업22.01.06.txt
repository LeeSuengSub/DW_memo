다음주 화요일 시험!

데이터베이스-> 테이블-> 데이터
테이블은 데이터를 저장하는 곳이고 데이터베이스는 테이블을 저장하는 곳이다.

1.데이터를 저장하는 프로그램을 배우는 것!
=>  DB(데이터베이스)

2.SQL이라는 문법을 통해서 데이터를 가져와야함.

**정보처리기사 준비하시는 분들은 (필기 단골 문제)
***DDL(data definition language)
    공통점: table을 관리하는 명령어.
    -CREATE
    -DROP
    -ALTER

*****DML(data manipulation languege)
    공통점: table 안에 있는 데이터를 관리하는 명령어
    -SELECT
    -DELETE
    -INSERT
    -UPDATE

DCL(data control languege)
    공통점: 데이터를 관리
    -GRANT
    -REVOKE


    DML 문법
        -select
        <컬럼이름>,
        <컬럼이름>,
        ...n
        from
        <테이블 이름>
        where <---필터링 기능
        <조건>
	group by <---그룹핑(묶는 기능)
	having <---where에서는 함수를 적지 못하기에 여기에 적는다.
	order by <--- 오름차순이나 내림차순으로 정렬할때 사용한다.
        예) 밥이 데이터, 그릇이 테이블

컬럼 이름.
MGR: 사수 번호
HIREDATE:고용 날짜
SAL: 월급
COMM: 보너스
DEPTNO: 부서번호

직업
-clerk: 사무원


where절에서는 컬럼명이 왼쪽에 오고 데이터가 오른쪽에 온다.
문자를 검색을 할떄는 '',""을 사용한다.
오류가 났으면, 오타를 확인하자.

****관계연산자.
->      >,<,<=,>=, =, != (다르다를 의미.)

****논리 연산자
->      and, or

이름: 홍길동 and 나이: 50 <- 두개가 참일때 and를 사용한다.
or은 두개 중에 하나라도 참이면 or을 사용한다.

로그인을 예로 하면,
and는 로그인 할때 id, password가 둘다 맞으면 로그인이 되고, 하나라도 틀리면 로그인이 되지 않는다.
or은 로그인 할때 하나가 틀려도 로그인이 가능해지는 불상사가 일어난다.

정렬은 where문 뒤에 온다.

정렬
order by <컬럼 이름> desc 나 asc
desc는 내림차순,
asc는 오름차순

오름차순은 디폴트
내림차순으로 하고 싶으면 desc


몇명인지 숫자만 확인하고 싶으면 count(*)
count(*) as '별명' <- 컬럼에 별명이 설정되서 나온다.
as를 많이 사용한다.
as를 적고 뒤에 '별명'을 적는다


해석순서
:1. from
2. where
3. select
4. order by

*order by: 맨 마지막에 실행하는 문법.

*최대한 사용하지 않도록 하자.
데이터가 없으면 상관없지만 데이터가 많으면 컴퓨터가 느려진다.

*null
where comm is not null
comm이 null인 아닌 사람. 
where comm is null
comm이 null인 사람.

null은 해당 데이터를 안 넣었다.
null 데이터는 조회하지 않는다.

코드가 중복이 되면 좋은 코드가 아니다.


-like문
이름이 A로 시작하는 사람을 조회하고 싶으면 
    where ename like 'a%'

이름에 L이 두번 나오는 사람을 조회하고 싶으면
    where ename like '%l%l%'

이름을 검색할 때는 관계연산자를 안쓰고 'like'를 이용한다.

delete는 오늘 안함.(22.01.06)
join을 배워야 설명이 가능.


-insert
insert into emp 
(empno,ename,job,mgr,hiredate,sal,comm,deptno)
values
(8000,'이승섭','salesman',7900,'2022-01-06',5000,1000,30)

null로 데이터를 넣고싶으면 insert into emp
(enpno,ename,job,mgr,hiredata,sal,comm,depno) <- null로 넣고 싶은 부분을 비워두면된다.

insert into <- 어? 너 어디테이블에 저장할꺼니?


insert 주의점.
-위아래 해당 컬럼이 맞는지 확인해야한다.
 이름을 적는 곳에 숫자를 넣으면 당연히 오류가 나듯이.
-오타 확인은 필수.

-update문
update emp
set ename = '정우성' <- 이상태로 진행하면 모든 사람의 이름이 '정우성'이 된다.
where 테이블 = empno 번호

***where <-필수로 와야 한다.


다중수정시에는 ,(콤마)를 활용하면 된다.

예) update emp 
set job = 'MANAGER',
sal = 8000
where empno = 8003;


-통계
count(*)
sum(컬럼이름),
avg()
max()
min()


1.select
2.delete
3.update
4.insert


from
where
and
or
등호
is
like
group by
having
order by


그룹핑
select 
job
from emp
group by JOB <- 얘


having은 group by 한 후 쓰인다.
group by 후 통계를 해야 할때 having을 사용한다.

where절에는 그룹핑한 얘들을 못 쓴다.

각 부서별이라는 말이 나오면 group by를 해야 하는구나.

입력 순서:
select-> 찾는것-> from-> where-> group by-> having-> order by(항상 맨 마지막)

검색순서(해석순서)
-> from-> where-> group by-> having-> select
*order by는 추가되면 맨마지막.


현재 가지고 있는 자료로는 job, deptno만 그룹으로 묶을수 있다.

group by는 공통점이 있어야 묶을 수 있다.

or은 where 절에 적는다.


where절에는 함수가 오지 못한다.(에러남.)
함수는 having에 적는다.


where절
or뒤에 또 where를 적을 필요가 없다.


is: null을 활용할 때만 사용.


컴퓨터 설치 TIP
노트북 사용자는
C++부터 설치를 하고 MySQL을 설치한다.